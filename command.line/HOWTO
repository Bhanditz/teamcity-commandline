Introduction
	TeamCity command line tool allows you to start Personal Builds from the command line.
	
Supported VCS
	The tool allows to run Personal Builds for sources under the SVN, CVS, Perforce and TFS source control systems. 

Requirements
	The tool is distributed as executable .jar and requires JRE only.

Installing
	The tool does not require any installation.

Running
	java -jar tcc.jar
	
Quick start

	Help: The tool contains help for each supported command. You can get the list of commands by:
	
	java -jar tcc.jar help
	
	A detailed command description is available too:
	
	java -jar tcc.jar help <command>
	
	
	Authorization:
	To perform the most of TeamCity operations you must point specify the TeamCity Server 
        to operate with as well as username and password. This can be done with help of "--host", 
        "--user" and "--password" options. 

        You can specify "--user" and "--password" for each run or use "login" command. The "login" 
        command persists credentials for target host so you can avoid authorization options for 
        subsequent starts. See help for "login" for more details. 

        All examples below were ran after the "login" was executed.
	
	Discover TeamCity Server structure: 
	First of all you have to create mapping(share) between local folder containing files for Remote Run 
        with existing TeamCity VCS root.
	Sharing requires knowledge of TeamCity VCS root id. "info" command can provide you with short 
        information about TeamCity Server's Projects, Configurations and VCS roots:      
		
		java -jar tcc.jar info --host http://rusps-app:80 -p
		
	a result of invocation is a list of existing TC projects, like this:
		id			name		status	description
		project3	tc_test		NORMAL	tc_test
		project2	tc_test_2	FAILURE	tc_test_2
	
	next you can get configurations of project "tc_test" for example:
	
		java -jar tcc.jar info --host http://rusps-app:80 -c -p project3 
	
	the tool prints configurations that belong to the project "tc_test":
		id	name				status	description
		bt9	tc-test-perforce	NORMAL	null
		bt5	tc-test-svn			NORMAL	null
		bt7	tc-test-svn-2		NORMAL	null
		bt8	test-CVS			NORMAL	null	
	
	and gather VCS roots of "tc-test-svn-2":  
   
		java -jar tcc.jar info --host http://rusps-app:80 -v -c bt7   

		id	name	vcsname	properties
		9	null	svn		{labelingPatterns=trunk=>tags, svn-config-directory=C:\Application Data\Subversion, svn-use-default-config-directory=true, externals-mode=externals-none, user=kdonskov, url=http://rusps-app.swiftteams.local:8080/svn/test/trunk/tc-test-rusps-app-svn/}
		
        ID of the VCS root is what is required by share command.
	
	Sharing:
	Perform "share" command for mapping local folder "C:\work\tc-test\tc-test-rusps-app-svn" to VcsRoot "9":
	
		java -jar tcc.jar share --host http://rusps-app:80 -l C:\work\tc-test\tc-test-rusps-app-svn -v 9
		
	All existing shares can be printed out by
	
	 	java -jar tcc.jar share --info

		id	local										vcsrootid	properties
		2	C:\work\tc-test\test-perforce-in-workspace	11			{port=rusps-app:1666, client-mapping=//depot/... //team-city-agent/..., p4-exe=p4, user=kdonskov, use-client=false}
		3	C:\work\tc-test\tc-test-CVS					10			{cvs-tag-mode=HEAD, cvs-quiet-period=3, cvs-root=:pserver:kdonskov@rusps-app.SwiftTeams.local:/CVS-ROOT, local-server-command=server, ssh-use-ppk=false, ssh-port=22, module-name=tc-test-CVS}
		28	C:\work\tc-test\tc-test-rusps-app-svn		9			{labelingPatterns=trunk=>tags, svn-config-directory=C:\Application Data\Subversion, svn-use-default-config-directory=true, user=kdonskov, externals-mode=externals-none, url=http://rusps-app.swiftteams.local:8080/svn/test/trunk/tc-test-rusps-app-svn/}
	
	
	See also: "unshare" command
	
	Remote Run:
	So we have all required information and prepared Share to perform Remote Run. Let's start a Remote Run for changed files 
        located in the shared folder "C:\work\tc-test\tc-test-rusps-app-svn" on Configuration "bt7":
	   
	   java -jar tcc.jar run --host http://rusps-app -c bt7 C:\work\tc-test\tc-test-rusps-app-svn
	   
	the command collects all files from the folder recursively and sends them to TeamCity Server for Remote Run.
	You can specify files for execution more accurately and such form allows you to send deleted files too:
	  
	  	java -jar tcc.jar run --host http://rusps-app -c bt7 C:\work\tc-test\tc-test-rusps-app-svn\src\all\New.java C:\work\tc-test\tc-test-rusps-app-svn\src\all\ENew.java
	   
	You can also pass a file with list of changed files:
	
		java -jar tcc.jar run --host http://rusps-app -c bt7 @C:\work\tc-test\tc-test-rusps-app-svn\src\all\changes.txt
		
	changes.txt content:
	C:\work\tc-test\tc-test-rusps-app-svn\src\all\ENew.java
	C:\work\tc-test\tc-test-rusps-app-svn\src\all\New.java
	
	Such file can be prepared with help of SCM own tools.
	 	
	By default the "run" command will wait for the build to finish and returns code corresponding to the status of the build. 
        This exit code can be used to perform a commit.

	 
	        	