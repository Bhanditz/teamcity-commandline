CommandRunner.connecting.step.name=Connecting to "{0}" TeamCity Server
CommandRunner.could.not.connect.error.pattern=Could not connect to server: {0}
CommandRunner.global.runtime.param.host=--host
CommandRunner.global.runtime.param.password=--password
CommandRunner.global.runtime.param.user=--user
CommandRunner.invalid.command.arguments.error.pattern=Invalid parameter(s) passed: {0}
CommandRunner.invalid.credential.error.pattern=Invalid username or password
CommandRunner.invalid.url.error.pattern=Invalid URL: {0}
CommandRunner.logging.step.name=Logging in
CommandRunner.no.default.host.error.pattern=No Default host and no host specified. Use "{0} [url]"
CommandRunner.not.logged.in.error.pattern=You are currently not logged in to "{0}". Run "login" command or specify "--user" & "--password"
CommandRunner.unknown.host.error.pattern=Unknown host: {0}
List.command.id=info
List.conf.runtime.param=-c
List.conf.runtime.param.long=--configurations
List.config.list.header=id\tname\tstatus\tdescription\n
List.config.list.pattern={0}\t{1}\t{2}\t{3}\n
List.configurations.section.header=configurations:\n
List.empty.description=<empty>
List.help.description=Show information for known TeamCity projects, configurations or vcsroots
List.help.usage.pattern={0}\
\nusage: {1} [{2}|{3}|{4}]\
\n\nWith no args, print all information of the target TeamCity Server\
\n\nValid options:\
\n\t{5}[{6}] \t: display Projects\
\n\t{7}[{8}] \t: display Configurations\
\n\t{9}[{10}] \t: display VcsRoots\n
List.no.config.found.for.filter.message=No "{0}" Configuration found
List.project.list.header=id\tname\tstatus\tdescription\n
List.project.list.pattern={0}\t{1}\t{2}\t{3}\n
List.project.runtime.param=-p
List.project.runtime.param.long=--projects
List.projects.section.header=projects:\n
List.vcsroot.runtime.param=-v
List.vcsroot.runtime.param.long=--vcsroots
List.vcsroots.list.header=id\tname\tvcsname\tproperties\n
List.vcsroots.list.pattern={0}\t{1}\t{2}\t{3}\n
List.vcsroots.section.header=vcsroots:\n
Login.command.id=login
Login.help.description=Prompt for username and password for authenticating TeamCity Server
Login.help.usage.pattern={0}\
\nusage: {1} {2} ARG_HOST [{3} ARG_USERNAME [{4} ARG_PASSWORD]]\
\n\nWith no username or password args, prompt for input username and password interactive\n
Login.password.prompt=enter password:
Login.result.ok.pattern=Login successful. all following commands will be performed with user "{0}" authentication. Use 'logout' command to remove authentication.
Login.username.prompt=enter username:
Logout.command.id=logout
Logout.help.description=Remove credential for TeamCity server
Logout.help.usage.pattern={0}\nusage: {0} {1} ARG_HOST\n
Logout.result.ok.pattern=Credential for "{0}" removed successfully
RemoteRun.build.failed.error.pattern=RemoteRun failed: build status={0}
RemoteRun.build.ok.commit.rejected.error.pattern=build is OK, but commit is not allowed: {0}
RemoteRun.build.result.ok.pattern=Build for Change \#{0} ran successfully: {1}
RemoteRun.collect.changes.step.name=Collecting changes
RemoteRun.collect.changes.step.result.pattern=Collected {0} files for Remote Run
RemoteRun.command.id=remoterun
RemoteRun.config.runtime.param=-c
RemoteRun.config.runtime.param.long=--configuration
RemoteRun.help.description=Fire Personal Build
RemoteRun.help.usage.pattern={0}\
\nusage: {1} {2}[{3}] ARG_CONFIG {4}[{5}] ARG_MESSAGE [{6}[{7}] ARG_TIMEOUT] [{8}[{9}]] FILE[FILE...]|@FILELIST\
\n\nRuns RemoteRun for TeamCity Configuration set with ARG_CONFIG argument and resources passed by FILE's section.\
\nIf filename's starting with "@" the file content is interpreted as list of resources for RemoteRun.\
\n\nNOTE: a file which is not found in local filesystem will be treated as deleted for RemoteRun.\
\n\nValid options:\n\t{10}[{11}] \tARG_CONFIG\t: target TeamCity configuration id for the RemoteRun\
\n\t{12}[{13}] \tARG_MESSAGE\t: users message describes changes for RemoteRun.\
\n\t{14}[{15}] \tARG_TIMEOUT\t: max time the utility will wait for RemoteRun result if -n|--nowait switch is missing\
\n\t{16}[{17}]\t\t: do not wait for build result, just schedule build for execution\n
RemoteRun.message.runtime.param=-m
RemoteRun.message.runtime.param.long=--message
RemoteRun.no.files.collected.for.remoterun.eror.message=No files collected for Remote Run.
RemoteRun.no.shares.for.remoterun.error.message=no one local folder shared with TeamCity
RemoteRun.nowait.runtime.param=-n
RemoteRun.nowait.runtime.param.long=--nowait
RemoteRun.passed.path.is.not.shared.error.message=Path is not shared: {0}
RemoteRun.preparing.patch..step.name=Preparing patch
RemoteRun.schedule.result.ok.pattern=Build for Change \#{0} scheduled successfully
RemoteRun.scheduling.build.step.name=Scheduling Personal Build
RemoteRun.send.patch.step.name=Sending the patch to TeamCity Server
RemoteRun.timeout.runtime.param=-t
RemoteRun.timeout.runtime.param.long=--timeout
RemoteRun.wait.for.build.statuschanged.step.name={0}
RemoteRun.wait.for.build.step.name=Waiting for Personal Build
RemoteRun.wait.for.build.timeout.exceed.error=Waiting for RemoteRun for Change \#{1} canceled: timeout {0} ms exceed
Share.command.id=share
Share.help.description=Associate local folder with known TeamCity VcsRoot
Share.help.usage.pattern={0}\
\nusage: [{1} {2}[{3}] ARG_VCSROOTID {4}[{5}] ARG_LOCALPATH] | [{6}[{7}]]\
\n\nCreate mapping of locat folder to existing TeamCity VcsRoot or show existing shares\
\n\nValid options:\n\t{8}[{9}] ARG_VCSROOTID\t: target TeamCity VcsRoot id. Can be found using by "info" command\
\n\t{10}[{11}] ARG_LOCALPATH\t: absolute path to existing local folder will be shared with TeamCity VcsRoot\
\n\t{12}[{13}]\t: show existing shares\n
Share.info.runtime.param=-i
Share.info.runtime.param.long=--info
Share.local.runtime.param=-l
Share.local.runtime.param.long=--local
Share.localpath.not.passed.error.message=no local path passed
Share.no.one.share.info.message=no one share found
Share.result.ok.pattern=New Share \#{0} from local path "{1}" to VcsRoot \#{2} was created
Share.shares.list.header=id\tlocal\tvcsrootid\tproperties\n
Share.shares.list.pattern={0}\t{1}\t{2}\t{3}\n
Share.vcsroot.not.found.for.sharing.error.message=no VcsRoot found. id={0}
Share.vcsroot.not.integer.error.message=wrong Id format: {0}
Share.vcsroot.runtime.param=-v
Share.vcsroot.runtime.param.long=--vcsroot
Unshare.command.id=unshare
Unshare.help.description=Remove association of local folder with TeamCity VcsRoot
Unshare.help.usage.pattern={0}\
\nusage: {1} {2}[{3}] ARG_SHAREID\
\n\nValid options:\n\t{2}[{3}] ARG_SHAREID\t: share's id that asked for removing. Can be found using by "share --info" command\n
Unshare.result.ok.pattern=Share "{0}" removed successfully
Unshare.share.runtime.param=-s
Unshare.share.runtime.param.long=--share
